# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dictionary_pb2 as dictionary__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dictionary_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DictionaryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.About = channel.unary_unary(
                '/Dictionary/About',
                request_serializer=dictionary__pb2.EmptyRequest.SerializeToString,
                response_deserializer=dictionary__pb2.LineReply.FromString,
                _registered_method=True)
        self.Author = channel.unary_unary(
                '/Dictionary/Author',
                request_serializer=dictionary__pb2.EmptyRequest.SerializeToString,
                response_deserializer=dictionary__pb2.LineReply.FromString,
                _registered_method=True)
        self.AllConcepts = channel.unary_unary(
                '/Dictionary/AllConcepts',
                request_serializer=dictionary__pb2.EmptyRequest.SerializeToString,
                response_deserializer=dictionary__pb2.AllConceptsReply.FromString,
                _registered_method=True)
        self.List = channel.unary_unary(
                '/Dictionary/List',
                request_serializer=dictionary__pb2.EmptyRequest.SerializeToString,
                response_deserializer=dictionary__pb2.ListReply.FromString,
                _registered_method=True)
        self.Definition = channel.unary_unary(
                '/Dictionary/Definition',
                request_serializer=dictionary__pb2.DefinitionRequest.SerializeToString,
                response_deserializer=dictionary__pb2.DefinitionReply.FromString,
                _registered_method=True)
        self.Create = channel.unary_unary(
                '/Dictionary/Create',
                request_serializer=dictionary__pb2.CreateRequest.SerializeToString,
                response_deserializer=dictionary__pb2.CompleteReply.FromString,
                _registered_method=True)
        self.Update = channel.unary_unary(
                '/Dictionary/Update',
                request_serializer=dictionary__pb2.CreateRequest.SerializeToString,
                response_deserializer=dictionary__pb2.CompleteReply.FromString,
                _registered_method=True)
        self.Remove = channel.unary_unary(
                '/Dictionary/Remove',
                request_serializer=dictionary__pb2.DefinitionRequest.SerializeToString,
                response_deserializer=dictionary__pb2.CompleteReply.FromString,
                _registered_method=True)


class DictionaryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def About(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Author(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllConcepts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Definition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DictionaryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'About': grpc.unary_unary_rpc_method_handler(
                    servicer.About,
                    request_deserializer=dictionary__pb2.EmptyRequest.FromString,
                    response_serializer=dictionary__pb2.LineReply.SerializeToString,
            ),
            'Author': grpc.unary_unary_rpc_method_handler(
                    servicer.Author,
                    request_deserializer=dictionary__pb2.EmptyRequest.FromString,
                    response_serializer=dictionary__pb2.LineReply.SerializeToString,
            ),
            'AllConcepts': grpc.unary_unary_rpc_method_handler(
                    servicer.AllConcepts,
                    request_deserializer=dictionary__pb2.EmptyRequest.FromString,
                    response_serializer=dictionary__pb2.AllConceptsReply.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=dictionary__pb2.EmptyRequest.FromString,
                    response_serializer=dictionary__pb2.ListReply.SerializeToString,
            ),
            'Definition': grpc.unary_unary_rpc_method_handler(
                    servicer.Definition,
                    request_deserializer=dictionary__pb2.DefinitionRequest.FromString,
                    response_serializer=dictionary__pb2.DefinitionReply.SerializeToString,
            ),
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=dictionary__pb2.CreateRequest.FromString,
                    response_serializer=dictionary__pb2.CompleteReply.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=dictionary__pb2.CreateRequest.FromString,
                    response_serializer=dictionary__pb2.CompleteReply.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=dictionary__pb2.DefinitionRequest.FromString,
                    response_serializer=dictionary__pb2.CompleteReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Dictionary', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Dictionary', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Dictionary(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def About(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/About',
            dictionary__pb2.EmptyRequest.SerializeToString,
            dictionary__pb2.LineReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Author(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/Author',
            dictionary__pb2.EmptyRequest.SerializeToString,
            dictionary__pb2.LineReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllConcepts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/AllConcepts',
            dictionary__pb2.EmptyRequest.SerializeToString,
            dictionary__pb2.AllConceptsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/List',
            dictionary__pb2.EmptyRequest.SerializeToString,
            dictionary__pb2.ListReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Definition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/Definition',
            dictionary__pb2.DefinitionRequest.SerializeToString,
            dictionary__pb2.DefinitionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/Create',
            dictionary__pb2.CreateRequest.SerializeToString,
            dictionary__pb2.CompleteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/Update',
            dictionary__pb2.CreateRequest.SerializeToString,
            dictionary__pb2.CompleteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Dictionary/Remove',
            dictionary__pb2.DefinitionRequest.SerializeToString,
            dictionary__pb2.CompleteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
